window.addEventListener("load", ()=> {

    console.log("WebAuthn SayfasÄ± yÃ¼klendi.");

    // -------------------------------------------------------------------------------------------------------------------------------------
    // Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  SÄ°TE Ä°Ã‡ERÄ°SÄ°NDE YAZMIÅž OLDUÄžUMUZ HTML SAYFASININ EKLENMESÄ°
    // HTML inner iÅŸlemleri 

    const newDiv = document.createElement("div");
    newDiv.className = "Extension-container"; // classname doÄŸru yazÄ±m

    // Eklenecek Html div
    newDiv.innerHTML= `
        <header class="Extension-container">
            <span class="custom-extension-icon">ðŸ”’</span>
            <h3>WebAuthn Eklentisi</h3>
        </header>
        <div class="actions">
            <button class="btn-custom btn-success-custom" id="my-kaydet-button">
                <span class="btn-icon">ðŸ“¥</span>
                WebAuthn ile KayÄ±t Ol
            </button>
            <button class="btn-custom btn-primary-custom" id="my-giris-button">
                <span class="btn-icon">ðŸ”‘</span>
                WebAuthn ile GiriÅŸ
            </button>
        </div>
    `;

    // Form alanÄ±nÄ±n altÄ±na eklenecek. 
    const webAuthnForm = document.querySelector('form');

    if (webAuthnForm) {
        webAuthnForm.parentNode.insertBefore(newDiv, webAuthnForm.nextSibling);
        console.log("Html sayfasÄ± baÅŸarÄ± ile yÃ¼klendi.");

        const kaydetButton = document.getElementById("my-kaydet-button");
        const girisButton = document.getElementById("my-giris-button");

        if(kaydetButton){
            kaydetButton.addEventListener("click",(event)=>{
                console.log("Html Ã¼zerinden Kaydet butonuna basÄ±ldÄ±.");
                registerApiButton();
            });
        }
        if(girisButton){
            girisButton.addEventListener("click",(event)=>{
                console.log("Html Ã¼zerinden Login butonuna basÄ±ldÄ±.");
                authenticateApiButton();
            });
        }
    } else {
        console.log("HTML form iÃ§eriÄŸi bulunamadÄ±. Html eklenti dosyasÄ± yÃ¼klenemdi.");
    }

    //---------------------------------------------------------------------------------------------------------------------------------
    // Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  SÄ°TENÄ°N HTML TAG'INDA TANIMLANMIÅž BUTONLARI MANÄ°PÃœLE ETME 

    // register ve Authenticate buttonlarÄ±nÄ± manipÃ¼le edecez.
    if (webAuthnForm) { // webAuthnForm'un null olup olmadÄ±ÄŸÄ±nÄ± kontrol edin
        webAuthnForm.addEventListener("submit",(event)=>{
            event.preventDefault();
            event.stopImmediatePropagation();
            console.log("Submit engellendi.");
        },true);
    }

    const registerButton = document.getElementById("register-button");
    const authenticateButton = document.getElementById("login-button");

    // Register Button 
    if(registerButton) {
        registerButton.addEventListener("click", (event)=> {
            event.preventDefault();
            event.stopImmediatePropagation(); 
            console.log("Register Butonuna tÄ±klandÄ±!!!");
            registerApiButton();
            console.log("Register Butonu ManipÃ¼le edildi.");
        },true);
    } else {
        console.log("Register Butonu bulunamadÄ± !!!!!!!");
    }

    // Authenticate Button 
    if(authenticateButton){
        authenticateButton.addEventListener("click",(event)=>{
            event.preventDefault();
            event.stopImmediatePropagation();
            console.log("Authenticate Butonuna TÄ±klandÄ±.");
            authenticateApiButton();
        },true);
    }

});

// -------------------------------------------------------------------------------------------------------------
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  BUTON Ä°ÅžLEVLERÄ° 
async function registerApiButton() {
    const username = getUsername();

    if (username) {
        alert(`API'ye kayÄ±t isteÄŸi gÃ¶nderiliyor: ${username}`);
        console.log(`API'ye kayÄ±t isteÄŸi gÃ¶nderiliyor: ${username}`);

        const apiEndpoint = 'https://localhost:7132/api/User/register'; 

        try {
            const response = await fetch(apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ Username: username })
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: 'YanÄ±t JSON formatÄ±nda deÄŸil veya boÅŸ.' }));
                throw new Error(`API HatasÄ± (${response.status}): ${errorData.message || JSON.stringify(errorData)}`);
            }

            const credentialCreationOptions = await response.json();
            console.log('API\'den gelen kayÄ±t seÃ§enekleri:', credentialCreationOptions);

            // *** DÃœZELTME: credentialCreationOptions.publicKey'nin varlÄ±ÄŸÄ±nÄ± kontrol edin ***
            if (!credentialCreationOptions || !credentialCreationOptions.publicKey) {
                throw new Error("Sunucudan gelen kayÄ±t seÃ§enekleri veya publicKey alanÄ± eksik.");
            }
            
            // `challenge` ve `user.id`'ye gÃ¼venli eriÅŸim
            if (credentialCreationOptions.publicKey.challenge) {
                credentialCreationOptions.publicKey.challenge = base64ToArrayBuffer(credentialCreationOptions.publicKey.challenge);
            } else {
                console.warn("KayÄ±t seÃ§eneklerinde challenge bulunamadÄ±.");
                // Burada bir hata fÄ±rlatmayÄ± dÃ¼ÅŸÃ¼nebilirsiniz, challenge olmazsa WebAuthn Ã§alÄ±ÅŸmaz.
                throw new Error("Sunucudan challenge deÄŸeri alÄ±namadÄ±.");
            }
            
            if (credentialCreationOptions.publicKey.user && credentialCreationOptions.publicKey.user.id) {
                credentialCreationOptions.publicKey.user.id = base64ToArrayBuffer(credentialCreationOptions.publicKey.user.id);
            } else {
                console.warn("KayÄ±t seÃ§eneklerinde user.id bulunamadÄ±.");
                // `user.id` olmazsa yine WebAuthn dÃ¼zgÃ¼n Ã§alÄ±ÅŸmayabilir.
                throw new Error("Sunucudan user.id deÄŸeri alÄ±namadÄ±.");
            }

            if (credentialCreationOptions.publicKey.excludeCredentials) {
                credentialCreationOptions.publicKey.excludeCredentials.forEach(cred => {
                    if (cred.id) { // cred.id'nin varlÄ±ÄŸÄ±nÄ± kontrol edin
                        cred.id = base64ToArrayBuffer(cred.id);
                    }
                });
            }

            const credential = await navigator.credentials.create({
                publicKey: credentialCreationOptions.publicKey
            });

            const attestationResponse = {
                id: credential.id,
                rawId: ArrayBufferToBase64(credential.rawId), 
                response: {
                    attestationObject: ArrayBufferToBase64(credential.response.attestationObject),
                    clientDataJSON: ArrayBufferToBase64(credential.response.clientDataJSON),
                },
                type: credential.type,
                // authenticatorAttachment, eÄŸer varsa eklenmeli
                authenticatorAttachment: (credential).authenticatorAttachment || undefined 
            };

            const registerResponseEndpoint = 'https://localhost:7132/api/User/register/response';
            const registerResponse = await fetch(registerResponseEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(attestationResponse)
            });

            if (!registerResponse.ok) {
                const errorData = await registerResponse.json().catch(() => ({ message: 'YanÄ±t JSON formatÄ±nda deÄŸil veya boÅŸ.' }));
                throw new Error(`API DoÄŸrulama HatasÄ± (${registerResponse.status}): ${errorData.message || JSON.stringify(errorData)}`);
            }

            const result = await registerResponse.json();
            alert(`KayÄ±t BaÅŸarÄ±lÄ±: ${result.Message}`);
            console.log('KayÄ±t baÅŸarÄ±lÄ±:', result);

        } catch (error) {
            console.error('KayÄ±t iÅŸlemi sÄ±rasÄ±nda hata oluÅŸtu:', error);
            alert(`KayÄ±t iÅŸlemi sÄ±rasÄ±nda hata oluÅŸtu: ${error.message || 'Bilinmeyen bir hata.'}`);
        }

    } else {
        alert("KayÄ±t iÅŸlemi iÃ§in bir kullanÄ±cÄ± adÄ± girmeniz gerekmektedir.");
        console.warn("KayÄ±t iÅŸlemi iÃ§in kullanÄ±cÄ± adÄ± alÄ±namadÄ± veya boÅŸ bÄ±rakÄ±ldÄ±.");
    }
}

async function authenticateApiButton() {
    let loginUsername = getUsername(); 

    if (!loginUsername) {
        alert("GiriÅŸ yapmak iÃ§in bir kullanÄ±cÄ± adÄ± girin.");
        console.warn("GiriÅŸ iÅŸlemi iÃ§in kullanÄ±cÄ± adÄ± alÄ±namadÄ± veya boÅŸ bÄ±rakÄ±ldÄ±.");
        return;
    }

    const apiEndpoint = `https://localhost:7132/api/User/authenticate?username=${encodeURIComponent(loginUsername)}`;

    try {
        // AdÄ±m 1: API'den kimlik doÄŸrulama seÃ§eneklerini al
        const response = await fetch(apiEndpoint, {
            method: 'GET', // GET metodu ile kullanÄ±cÄ± adÄ±nÄ± query string olarak gÃ¶nder
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ message: 'YanÄ±t JSON formatÄ±nda deÄŸil veya boÅŸ.' }));
            throw new Error(`API HatasÄ± (${response.status}): ${errorData.message || JSON.stringify(errorData)}`);
        }

        const assertionOptions = await response.json();
        console.log('API\'den gelen kimlik doÄŸrulama seÃ§enekleri:', assertionOptions);

        // *** DÃœZELTME: assertionOptions.publicKey'nin varlÄ±ÄŸÄ±nÄ± kontrol edin ***
        if (!assertionOptions || !assertionOptions.publicKey) {
            throw new Error("Sunucudan gelen kimlik doÄŸrulama seÃ§enekleri veya publicKey alanÄ± eksik.");
        }

        // SeÃ§enekleri WebAuthn API'sine uygun hale getir
        if (assertionOptions.publicKey.challenge) {
            assertionOptions.publicKey.challenge = base64ToArrayBuffer(assertionOptions.publicKey.challenge);
        } else {
            console.warn("Kimlik doÄŸrulama seÃ§eneklerinde challenge bulunamadÄ±.");
            throw new Error("Sunucudan challenge deÄŸeri alÄ±namadÄ±.");
        }

        if (assertionOptions.publicKey.allowCredentials) {
            assertionOptions.publicKey.allowCredentials.forEach(cred => {
                if (cred.id) { // cred.id'nin varlÄ±ÄŸÄ±nÄ± kontrol edin
                    cred.id = base64ToArrayBuffer(cred.id);
                }
            });
        }

        // AdÄ±m 2: TarayÄ±cÄ±da kimlik doÄŸrulamasÄ± yap
        const credential = await navigator.credentials.get({
            publicKey: assertionOptions.publicKey
        });

        // AdÄ±m 3: DoÄŸrulanan kimlik bilgisini API'ye gÃ¶nder
        const assertionResponse = {
            id: credential.id,
            rawId: ArrayBufferToBase64(credential.rawId),
            response: {
                authenticatorData: ArrayBufferToBase64(credential.response.authenticatorData),
                clientDataJSON: ArrayBufferToBase64(credential.response.clientDataJSON),
                signature: ArrayBufferToBase64(credential.response.signature),
                // userHandle null olabileceÄŸi iÃ§in kontrol ekleyin
                userHandle: credential.response.userHandle ? ArrayBufferToBase64(credential.response.userHandle) : null,
            },
            type: credential.type,
        };

        const authenticateResponseEndpoint = 'https://localhost:7132/api/User/authenticate/response';
        const authenticateResponse = await fetch(authenticateResponseEndpoint, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(assertionResponse)
        });

        if (!authenticateResponse.ok) {
            const errorData = await authenticateResponse.json().catch(() => ({ message: 'YanÄ±t JSON formatÄ±nda deÄŸil veya boÅŸ.' }));
            throw new Error(`API Kimlik DoÄŸrulama HatasÄ± (${authenticateResponse.status}): ${errorData.message || JSON.stringify(errorData)}`);
        }

        const result = await authenticateResponse.json();
        alert(`GiriÅŸ BaÅŸarÄ±lÄ±: ${result.Message}`);
        console.log('GiriÅŸ baÅŸarÄ±lÄ±:', result);

        // BaÅŸarÄ±lÄ± giriÅŸ sonrasÄ± profile sayfasÄ±na yÃ¶nlendirme
        if (result.RedirectUrl) {
            window.location.href = result.RedirectUrl;
        }

    } catch (error) {
        console.error('Kimlik doÄŸrulama iÅŸlemi sÄ±rasÄ±nda hata oluÅŸtu:', error);
        alert(`Kimlik doÄŸrulama iÅŸlemi sÄ±rasÄ±nda hata oluÅŸtu: ${error.message || 'Bilinmeyen bir hata.'}`);
    }
}

// ArrayBuffer'Ä± Base64 string'e dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r (Base64 URL Safe deÄŸildir)
function ArrayBufferToBase64(buffer) {
    // FIDO2 genellikle Base64Url kullanÄ±r. Bu fonksiyon standart Base64 kullanÄ±r.
    // EÄŸer sunucu Base64Url bekliyorsa, bu fonksiyonda ayarlama yapmanÄ±z gerekebilir.
    return btoa(String.fromCharCode(...new Uint8Array(buffer)));
}

// Base64 string'i ArrayBuffer'a dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r (Base64 URL Safe deÄŸildir)
function base64ToArrayBuffer(base64) {
    // FIDO2 genellikle Base64Url kullanÄ±r. Bu fonksiyon standart Base64 kullanÄ±r.
    // EÄŸer sunucudan Base64Url geliyorsa, atob Ã¶ncesi dÃ¼zeltme yapmanÄ±z gerekebilir (Ã¶rn: -'i + ya, _'yi /'ye Ã§evirme).
    const binary_string = window.atob(base64.replace(/-/g, '+').replace(/_/g, '/')); // Base64Url safe dÃ¶nÃ¼ÅŸÃ¼mÃ¼ iÃ§in ekleme
    const len = binary_string.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
        bytes[i] = binary_string.charCodeAt(i);
    }
    return bytes.buffer;
}

// Input alanÄ±na giren Username'i Ã§alÄ±ÅŸtÄ±r. 
function getUsername(){
    const inputUsername = document.getElementById("input-email");
    let username = "";
    if(inputUsername){
        username = inputUsername.value.trim();
        if(username){
            console.log("Kullanici adi :",username);
            return username;
        } else {
            alert("KullanÄ±cÄ± adÄ±nÄ± giriniz.");
            return null;
        }
    } else {
        console.log("Input alanÄ± alÄ±namadÄ±.");
        return null;
    }
}

// --------------------------------------------------------------------------------------------------------------------------
// Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â POPUP TAG'INDAN GELEN MESAJLARI YÃ–NETME 

chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === "performRegistration") {
        console.log("Popup'tan kayit isteÄŸi alindi!");
        registerApiButton(); 
    } else if (message.action === "performAuthentication") {
        console.log("Popup'tan giriÅŸ isteÄŸi alindi !");
        authenticateApiButton(); 
    }
});